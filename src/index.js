'use strict';

const INVALID_DATA = 0;
const TWOFOLD_OLDER_NOW = -1;

/**
 * Checks if the father is more than twice as old as the son.
 * @param {number} fatherAge - Age of the father.
 * @param {number} sonAge - Age of the son.
 * @returns {boolean} - True if the father is more than twice as old as the son, otherwise false.
 */
const isFatherMoreThanTwiceOlder = (fatherAge, sonAge) =>
    fatherAge / sonAge > 2;

/**
 * Validates the provided ages.
 * @param {*} fatherAge - Age of the father.
 * @param {*} sonAge - Age of the son.
 * @returns {boolean} - True if the data is valid, otherwise false.
 */
function isAgeDataValid(fatherAge, sonAge) {
    if (
        typeof fatherAge === 'number' &&
        typeof sonAge === 'number' &&
        fatherAge > 0 &&
        sonAge > 0 &&
        fatherAge - sonAge >= 15
    ) {
        return true;
    }
    return false;
}

/**
 * Calculates the number of years before or after the moment when the father will be/was twice as old as his son.
 * @param {number} fatherAge - Age of the father.
 * @param {number} sonAge - Age of the son.
 * @returns {number} - Number of years before or after the moment when the father will be/was twice as old as his son.
 */
function calculateYearsDifferenceToTwiceOlder(fatherAge, sonAge) {
    const isFatherMoreThanTwiceOlderThenSon = isFatherMoreThanTwiceOlder(
        fatherAge,
        sonAge
    );

    if (isFatherMoreThanTwiceOlderThenSon) {
        return fatherAge - 2 * sonAge;
    }

    return 2 * sonAge - fatherAge;
}

/**
 * Main logic: validates input, checks if the father is twice as old now,
 * otherwise calculates years before or after this happens.
 * @param {number} fatherAge - Age of the father.
 * @param {number} sonAge - Age of the son.
 * @returns {number} Returns:
 *  0 - if data is invalid,
 *  -1 - if father is twice as old now,
 *  any number - years before/after will be/was twice as old as his son
 */
function getYearsUntilOrSinceTwiceOlder(fatherAge, sonAge) {
    const isDataValid = isAgeDataValid(fatherAge, sonAge);

    if (!isDataValid) return INVALID_DATA;

    if (fatherAge / sonAge === 2) return TWOFOLD_OLDER_NOW;

    return calculateYearsDifferenceToTwiceOlder(fatherAge, sonAge);
}

/**
 * Prints the result to the console.
 * @param {number} fatherAge - Age of the father.
 * @param {number} sonAge - Age of the son.
 */
function printResult(fatherAge, sonAge) {
    const result = getYearsUntilOrSinceTwiceOlder(fatherAge, sonAge);

    switch (result) {
        case INVALID_DATA:
            console.log(
                `‚ùå Invalid data: (${fatherAge}, ${sonAge}), age should be a number, age difference should be more than 15, ages should be more than 0, try again`
            );
            break;
        case TWOFOLD_OLDER_NOW:
            console.log(
                `üÜó Father is twofold older now, Father age: ${fatherAge}, Son age: ${sonAge}`
            );
            break;
        default:
            const isFatherMoreThanTwiceOlderThenSon =
                isFatherMoreThanTwiceOlder(fatherAge, sonAge);
            if (isFatherMoreThanTwiceOlderThenSon) {
                console.log(
                    `‚úÖ Father will be twofold older than Son in ${result} years, when Father's age will be: ${
                        fatherAge + result
                    } and Son's age will be: ${sonAge + result}`
                );
            } else {
                console.log(
                    `‚úÖ Father was twofold older than Son ${result} years ago, when Father's age was: ${
                        fatherAge - result
                    } and Son's age was: ${sonAge - result}`
                );
            }
    }
}

// –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
printResult(-10, 5); // –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤—ñ–∫ –±–∞—Ç—å–∫–∞
printResult(40, -5); // –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤—ñ–∫ —Å–∏–Ω–∞
printResult(10, 5); // –†—ñ–∑–Ω–∏—Ü—è –º–µ–Ω—à–µ 15 —Ä–æ–∫—ñ–≤
printResult(0, 5); // –í—ñ–∫ –±–∞—Ç—å–∫–∞ 0
printResult(50, 0); // –í—ñ–∫ —Å–∏–Ω–∞ 0
printResult('50', 25); // –¢–∏–ø –Ω–µ number (string)

// –ë–∞—Ç—å–∫–æ –¥–≤—ñ—á—ñ —Å—Ç–∞—Ä—à–∏–π –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑
printResult(40, 20); // 2x –∑–∞—Ä–∞–∑
printResult(90, 45); // 2x –∑–∞—Ä–∞–∑

// –ë–∞—Ç—å–∫–æ —Å—Ç–∞–Ω–µ –¥–≤—ñ—á—ñ —Å—Ç–∞—Ä—à–∏–º —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É
printResult(50, 30); // —Å—Ç–∞–Ω–µ —á–µ—Ä–µ–∑ 10 —Ä–æ–∫—ñ–≤
printResult(45, 25); // —Å—Ç–∞–Ω–µ —á–µ—Ä–µ–∑ 5 —Ä–æ–∫—ñ–≤
printResult(70, 40); // —Å—Ç–∞–Ω–µ —á–µ—Ä–µ–∑ 10 —Ä–æ–∫—ñ–≤

// –ë–∞—Ç—å–∫–æ –±—É–≤ –¥–≤—ñ—á—ñ —Å—Ç–∞—Ä—à–∏–º —É –º–∏–Ω—É–ª–æ–º—É
printResult(80, 35); // –±—É–≤ 10 —Ä–æ–∫—ñ–≤ —Ç–æ–º—É
printResult(60, 20); // –±—É–≤ 20 —Ä–æ–∫—ñ–≤ —Ç–æ–º—É
printResult(100, 30); // –±—É–≤ 40 —Ä–æ–∫—ñ–≤ —Ç–æ–º—É
